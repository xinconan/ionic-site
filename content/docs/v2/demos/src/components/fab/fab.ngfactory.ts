/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './fab';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '../../config/config';
import * as import11 from '../icon/icon.ngfactory';
import * as import12 from '../icon/icon';
export class Wrapper_FabContainer {
  /*private*/ _eventHandler:Function;
  context:import0.FabContainer;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.FabContainer(p0);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_FabButton {
  /*private*/ _eventHandler:Function;
  context:import0.FabButton;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.FabButton(p0,p1,p2);
    this._expr_0 = import2.UNINITIALIZED;
    this._expr_1 = import2.UNINITIALIZED;
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_FabList {
  /*private*/ _eventHandler:Function;
  context:import0.FabList;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.FabList(p0,p1,p2);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_FabContainer_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_FabContainer_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.FabContainer>;
  _FabContainer_0_3:Wrapper_FabContainer;
  _query_FabButton_0_0:import6.QueryList<any>;
  _query_FabList_0_1:import6.QueryList<any>;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FabContainer_Host0,renderType_FabContainer_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import2.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-fab',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FabContainer0(this.viewUtils,this,0,this._el_0);
    this._FabContainer_0_3 = new Wrapper_FabContainer(new import9.ElementRef(this._el_0));
    this._query_FabButton_0_0 = new import6.QueryList<any>();
    this._query_FabList_0_1 = new import6.QueryList<any>();
    this._query_FabButton_0_0.reset(([] as any[]));
    this._FabContainer_0_3.context._mainButton = this._query_FabButton_0_0.first;
    this.compView_0.create(this._FabContainer_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._FabContainer_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FabContainer) && (0 === requestNodeIndex))) { return this._FabContainer_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FabContainer_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) {
      if (this._query_FabList_0_1.dirty) {
        this._query_FabList_0_1.reset(([] as any[]));
        this._FabContainer_0_3.context._fabLists = this._query_FabList_0_1;
        this._query_FabList_0_1.notifyOnChanges();
      }
      if ((this.numberOfChecks === 0)) { this._FabContainer_0_3.context.ngAfterContentInit(); }
    }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._FabContainer_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const FabContainerNgFactory:import8.ComponentFactory<import0.FabContainer> = new import8.ComponentFactory<import0.FabContainer>('ion-fab',View_FabContainer_Host0,import0.FabContainer);
const styles_FabContainer:any[] = ([] as any[]);
var renderType_FabContainer:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_FabContainer,{});
export class View_FabContainer0 extends import1.AppView<import0.FabContainer> {
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FabContainer0,renderType_FabContainer,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import2.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this.projectNodes(parentRenderNode,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): ([] as any[])),(null as any));
    return (null as any);
  }
}
var renderType_FabButton_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_FabButton_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.FabButton>;
  _FabButton_0_3:Wrapper_FabButton;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FabButton_Host0,renderType_FabButton_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import2.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'div',new import3.InlineArray2(2,'ion-fab',''),rootSelector,(null as any));
    this.compView_0 = new View_FabButton0(this.viewUtils,this,0,this._el_0);
    this._FabButton_0_3 = new Wrapper_FabButton(this.injectorGet(import10.Config,this.parentIndex),new import9.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._FabButton_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._FabButton_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FabButton) && (0 === requestNodeIndex))) { return this._FabButton_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._FabButton_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const FabButtonNgFactory:import8.ComponentFactory<import0.FabButton> = new import8.ComponentFactory<import0.FabButton>('[ion-fab]',View_FabButton_Host0,import0.FabButton);
const styles_FabButton:any[] = ([] as any[]);
var renderType_FabButton:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_FabButton,{});
export class View_FabButton0 extends import1.AppView<import0.FabButton> {
  _el_0:any;
  _Icon_0_3:import11.Wrapper_Icon;
  _el_1:any;
  _el_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FabButton0,renderType_FabButton,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import2.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'ion-icon',new import3.InlineArray8(6,'class','fab-close-icon','name','close','role','img'),(null as any));
    this._Icon_0_3 = new import11.Wrapper_Icon(this.parentView.injectorGet(import10.Config,this.parentIndex),new import9.ElementRef(this._el_0),this.renderer);
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'span',new import3.InlineArray2(2,'class','button-inner'),(null as any));
    this.projectNodes(this._el_1,0);
    this._el_2 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','button-effect'),(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.Icon) && (0 === requestNodeIndex))) { return this._Icon_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'close';
    this._Icon_0_3.check_name(currVal_0_0_0,throwOnChange,false);
    this._Icon_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._Icon_0_3.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._Icon_0_3.ngOnDestroy();
  }
}