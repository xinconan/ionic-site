/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './menu';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from './menu-controller';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '../../config/config';
import * as import12 from '../../platform/platform';
import * as import13 from '../../util/keyboard';
import * as import14 from '@angular/core/src/zone/ng_zone';
import * as import15 from '../../gestures/gesture-controller';
import * as import16 from '../../util/dom-controller';
import * as import17 from '../app/app';
import * as import18 from '../backdrop/backdrop.ngfactory';
import * as import19 from '../backdrop/backdrop';
export class Wrapper_Menu {
  /*private*/ _eventHandler:Function;
  context:import0.Menu;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any,p8:any,p9:any) {
    this._changed = false;
    this.context = new import0.Menu(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_content(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.content = currValue;
      this._expr_0 = currValue;
    }
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_1 = currValue;
    }
  }
  check_side(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.side = currValue;
      this._expr_2 = currValue;
    }
  }
  check_type(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.type = currValue;
      this._expr_3 = currValue;
    }
  }
  check_enabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.enabled = currValue;
      this._expr_4 = currValue;
    }
  }
  check_swipeEnabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.swipeEnabled = currValue;
      this._expr_5 = currValue;
    }
  }
  check_persistent(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.persistent = currValue;
      this._expr_6 = currValue;
    }
  }
  check_maxEdgeStart(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.maxEdgeStart = currValue;
      this._expr_7 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.ionDrag.subscribe(_eventHandler.bind(view,'ionDrag'))); }
    if (emit1) { (this.subscription1 = this.context.ionOpen.subscribe(_eventHandler.bind(view,'ionOpen'))); }
    if (emit2) { (this.subscription2 = this.context.ionClose.subscribe(_eventHandler.bind(view,'ionClose'))); }
  }
}
var renderType_Menu_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_Menu_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.Menu>;
  _Menu_0_3:Wrapper_Menu;
  _query_Content_0_0:import6.QueryList<any>;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Menu_Host0,renderType_Menu_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-menu',new import3.InlineArray2(2,'role','navigation'),rootSelector,(null as any));
    this.compView_0 = new View_Menu0(this.viewUtils,this,0,this._el_0);
    this._Menu_0_3 = new Wrapper_Menu(this.injectorGet(import9.MenuController,this.parentIndex),new import10.ElementRef(this._el_0),this.injectorGet(import11.Config,this.parentIndex),this.injectorGet(import12.Platform,this.parentIndex),this.renderer,this.injectorGet(import13.Keyboard,this.parentIndex),this.injectorGet(import14.NgZone,this.parentIndex),this.injectorGet(import15.GestureController,this.parentIndex),this.injectorGet(import16.DomController,this.parentIndex),this.injectorGet(import17.App,this.parentIndex));
    this._query_Content_0_0 = new import6.QueryList<any>();
    this._query_Content_0_0.reset(([] as any[]));
    this._Menu_0_3.context.menuContent = this._query_Content_0_0.first;
    this.compView_0.create(this._Menu_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._Menu_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Menu) && (0 === requestNodeIndex))) { return this._Menu_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._Menu_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._Menu_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MenuNgFactory:import8.ComponentFactory<import0.Menu> = new import8.ComponentFactory<import0.Menu>('ion-menu',View_Menu_Host0,import0.Menu);
const styles_Menu:any[] = ([] as any[]);
var renderType_Menu:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_Menu,{});
export class View_Menu0 extends import2.AppView<import0.Menu> {
  _viewQuery_Backdrop_0:import6.QueryList<any>;
  _el_0:any;
  _el_1:any;
  _Backdrop_1_3:import18.Wrapper_Backdrop;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Menu0,renderType_Menu,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_Backdrop_0 = new import6.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','menu-inner'),(null as any));
    this.projectNodes(this._el_0,0);
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ion-backdrop',new import3.InlineArray8(6,'disable-activated','','role','presentation','tappable',''),(null as any));
    this._Backdrop_1_3 = new import18.Wrapper_Backdrop(new import10.ElementRef(this._el_1),this.renderer);
    this._viewQuery_Backdrop_0.reset([this._Backdrop_1_3.context]);
    this.context.backdrop = this._viewQuery_Backdrop_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.Backdrop) && (1 === requestNodeIndex))) { return this._Backdrop_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Backdrop_1_3.ngDoCheck(this,this._el_1,throwOnChange);
  }
}