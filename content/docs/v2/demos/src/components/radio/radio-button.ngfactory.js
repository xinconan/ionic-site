/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from './radio-button';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../util/form';
import * as import9 from '../../config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '../item/item';
import * as import12 from './radio-group';
import * as import13 from '../button/button';
import * as import14 from '../button/button.ngfactory';
export var Wrapper_RadioButton = (function () {
    function Wrapper_RadioButton(p0, p1, p2, p3, p4, p5) {
        this._changed = false;
        this.context = new import0.RadioButton(p0, p1, p2, p3, p4, p5);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
    }
    Wrapper_RadioButton.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_RadioButton.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_RadioButton.prototype.check_color = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.color = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.mode = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_value = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.value = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_checked = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.checked = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_RadioButton.prototype.check_disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_RadioButton.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_RadioButton.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_5 = this.context._disabled;
        if (import3.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'radio-disabled', currVal_5);
            this._expr_5 = currVal_5;
        }
    };
    Wrapper_RadioButton.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context._click($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_RadioButton.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.ionSelect.subscribe(_eventHandler.bind(view, 'ionSelect')));
        }
    };
    return Wrapper_RadioButton;
}());
var renderType_RadioButton_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_RadioButton_Host0 = (function (_super) {
    __extends(View_RadioButton_Host0, _super);
    function View_RadioButton_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_RadioButton_Host0, renderType_RadioButton_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_RadioButton_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ion-radio', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_RadioButton0(this.viewUtils, this, 0, this._el_0);
        this._RadioButton_0_3 = new Wrapper_RadioButton(this.injectorGet(import8.Form, this.parentIndex), this.injectorGet(import9.Config, this.parentIndex), new import10.ElementRef(this._el_0), this.renderer, this.injectorGet(import11.Item, this.parentIndex, null), this.injectorGet(import12.RadioGroup, this.parentIndex, null));
        this.compView_0.create(this._RadioButton_0_3.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import7.ComponentRef_(0, this, this._el_0, this._RadioButton_0_3.context);
    };
    View_RadioButton_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.RadioButton) && (0 === requestNodeIndex))) {
            return this._RadioButton_0_3.context;
        }
        return notFoundResult;
    };
    View_RadioButton_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._RadioButton_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._RadioButton_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_RadioButton_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._RadioButton_0_3.ngOnDestroy();
    };
    View_RadioButton_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_RadioButton_Host0.prototype.handleEvent_0 = function (eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RadioButton_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return View_RadioButton_Host0;
}(import2.AppView));
export var RadioButtonNgFactory = new import7.ComponentFactory('ion-radio', View_RadioButton_Host0, import0.RadioButton);
var styles_RadioButton = [];
var renderType_RadioButton = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_RadioButton, {});
export var View_RadioButton0 = (function (_super) {
    __extends(View_RadioButton0, _super);
    function View_RadioButton0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_RadioButton0, renderType_RadioButton, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_9 = import1.UNINITIALIZED;
        this._expr_10 = import1.UNINITIALIZED;
        this._expr_11 = import1.UNINITIALIZED;
        this._expr_12 = import1.UNINITIALIZED;
        this._expr_13 = import1.UNINITIALIZED;
    }
    View_RadioButton0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'radio-icon'), null);
        this._text_1 = this.renderer.createText(this._el_0, ' ', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'div', new import3.InlineArray2(2, 'class', 'radio-inner'), null);
        this._text_3 = this.renderer.createText(this._el_0, ' ', null);
        this._text_4 = this.renderer.createText(parentRenderNode, ' ', null);
        this._el_5 = import3.createRenderElement(this.renderer, parentRenderNode, 'button', new import3.InlineArray8(8, 'class', 'item-cover', 'ion-button', 'item-cover', 'role', 'radio', 'type', 'button'), null);
        this.compView_5 = new import14.View_Button0(this.viewUtils, this, 5, this._el_5);
        this._Button_5_3 = new import14.Wrapper_Button('item-cover', this.parentView.injectorGet(import9.Config, this.parentIndex), new import10.ElementRef(this._el_5), this.renderer);
        this._text_6 = this.renderer.createText(null, ' ', null);
        this.compView_5.create(this._Button_5_3.context);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6
        ]), null);
        return null;
    };
    View_RadioButton0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.Button) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 6)))) {
            return this._Button_5_3.context;
        }
        return notFoundResult;
    };
    View_RadioButton0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._Button_5_3.ngDoCheck(this, this._el_5, throwOnChange)) {
            this.compView_5.markAsCheckOnce();
        }
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_5_3.context.ngAfterContentInit();
            }
        }
        var currVal_9 = this.context._checked;
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementClass(this._el_0, 'radio-checked', currVal_9);
            this._expr_9 = currVal_9;
        }
        var currVal_10 = this.context.id;
        if (import3.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            this.renderer.setElementProperty(this._el_5, 'id', currVal_10);
            this._expr_10 = currVal_10;
        }
        var currVal_11 = this.context._checked;
        if (import3.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-checked', ((currVal_11 == null) ? null : currVal_11.toString()));
            this._expr_11 = currVal_11;
        }
        var currVal_12 = this.context._labelId;
        if (import3.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-labelledby', ((currVal_12 == null) ? null : currVal_12.toString()));
            this._expr_12 = currVal_12;
        }
        var currVal_13 = this.context._disabled;
        if (import3.checkBinding(throwOnChange, this._expr_13, currVal_13)) {
            this.renderer.setElementAttribute(this._el_5, 'aria-disabled', ((currVal_13 == null) ? null : currVal_13.toString()));
            this._expr_13 = currVal_13;
        }
        this.compView_5.detectChanges(throwOnChange);
    };
    View_RadioButton0.prototype.destroyInternal = function () {
        this.compView_5.destroy();
    };
    View_RadioButton0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 5) && (ngContentIndex == 0))) {
            cb(this._text_6, ctx);
        }
    };
    return View_RadioButton0;
}(import2.AppView));
//# sourceMappingURL=radio-button.ngfactory.js.map