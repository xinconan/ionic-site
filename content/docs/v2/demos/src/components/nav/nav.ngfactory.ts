/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './nav';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../navigation/view-controller';
import * as import9 from '../../navigation/nav-controller';
import * as import10 from '../app/app';
import * as import11 from '../../config/config';
import * as import12 from '../../util/keyboard';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/core/src/zone/ng_zone';
import * as import15 from '@angular/core/src/linker/component_factory_resolver';
import * as import16 from '../../gestures/gesture-controller';
import * as import17 from '../../transitions/transition-controller';
import * as import18 from '../../navigation/deep-linker';
import * as import19 from '../../util/dom-controller';
import * as import20 from '@angular/core/src/linker/query_list';
import * as import21 from '@angular/core/src/linker/view_container';
export class Wrapper_Nav {
  /*private*/ _eventHandler:Function;
  context:import0.Nav;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any,p8:any,p9:any,p10:any,p11:any,p12:any) {
    this._changed = false;
    this.context = new import0.Nav(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_root(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.root = currValue;
      this._expr_0 = currValue;
    }
  }
  check_rootParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.rootParams = currValue;
      this._expr_1 = currValue;
    }
  }
  check_swipeBackEnabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.swipeBackEnabled = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_Nav_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_Nav_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.Nav>;
  _Nav_0_3:Wrapper_Nav;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Nav_Host0,renderType_Nav_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-nav',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Nav0(this.viewUtils,this,0,this._el_0);
    this._Nav_0_3 = new Wrapper_Nav(this.injectorGet(import8.ViewController,this.parentIndex,(null as any)),this.injectorGet(import9.NavController,this.parentIndex,(null as any)),this.injectorGet(import10.App,this.parentIndex),this.injectorGet(import11.Config,this.parentIndex),this.injectorGet(import12.Keyboard,this.parentIndex),new import13.ElementRef(this._el_0),this.injectorGet(import14.NgZone,this.parentIndex),this.renderer,this.injectorGet(import15.ComponentFactoryResolver,this.parentIndex),this.injectorGet(import16.GestureController,this.parentIndex),this.injectorGet(import17.TransitionController,this.parentIndex),this.injectorGet(import18.DeepLinker,this.parentIndex,(null as any)),this.injectorGet(import19.DomController,this.parentIndex));
    this.compView_0.create(this._Nav_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._Nav_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Nav) && (0 === requestNodeIndex))) { return this._Nav_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Nav_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Nav_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const NavNgFactory:import7.ComponentFactory<import0.Nav> = new import7.ComponentFactory<import0.Nav>('ion-nav',View_Nav_Host0,import0.Nav);
const styles_Nav:any[] = ([] as any[]);
var renderType_Nav:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_Nav,{});
export class View_Nav0 extends import2.AppView<import0.Nav> {
  _viewQuery_viewport_0:import20.QueryList<any>;
  _el_0:any;
  /*private*/ _vc_0:import21.ViewContainer;
  _el_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Nav0,renderType_Nav,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_viewport_0 = new import20.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'nav-viewport',''),(null as any));
    this._vc_0 = new import21.ViewContainer(0,(null as any),this,this._el_0);
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','nav-decor'),(null as any));
    this._viewQuery_viewport_0.reset([this._vc_0.vcRef]);
    this.context._vp = this._viewQuery_viewport_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._vc_0.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_0.destroyNestedViews();
  }
}