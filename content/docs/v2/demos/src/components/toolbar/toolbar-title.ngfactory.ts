/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './toolbar-title';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../config/config';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from './toolbar';
import * as import11 from '../navbar/navbar';
import * as import12 from '../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import13 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import14 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import15 from '@angular/common/src/directives/ng_class';
export class Wrapper_ToolbarTitle {
  /*private*/ _eventHandler:Function;
  context:import0.ToolbarTitle;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this._changed = false;
    this.context = new import0.ToolbarTitle(p0,p1,p2,p3,p4);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_ToolbarTitle_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_ToolbarTitle_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.ToolbarTitle>;
  _ToolbarTitle_0_3:Wrapper_ToolbarTitle;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ToolbarTitle_Host0,renderType_ToolbarTitle_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-title',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ToolbarTitle0(this.viewUtils,this,0,this._el_0);
    this._ToolbarTitle_0_3 = new Wrapper_ToolbarTitle(this.injectorGet(import8.Config,this.parentIndex),new import9.ElementRef(this._el_0),this.renderer,this.injectorGet(import10.Toolbar,this.parentIndex,(null as any)),this.injectorGet(import11.Navbar,this.parentIndex,(null as any)));
    this.compView_0.create(this._ToolbarTitle_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._ToolbarTitle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ToolbarTitle) && (0 === requestNodeIndex))) { return this._ToolbarTitle_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._ToolbarTitle_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const ToolbarTitleNgFactory:import7.ComponentFactory<import0.ToolbarTitle> = new import7.ComponentFactory<import0.ToolbarTitle>('ion-title',View_ToolbarTitle_Host0,import0.ToolbarTitle);
const styles_ToolbarTitle:any[] = ([] as any[]);
var renderType_ToolbarTitle:import2.RenderComponentType = import3.createRenderComponentType('',1,import4.ViewEncapsulation.None,styles_ToolbarTitle,{});
export class View_ToolbarTitle0 extends import1.AppView<import0.ToolbarTitle> {
  _el_0:any;
  _NgClass_0_3:import12.Wrapper_NgClass;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ToolbarTitle0,renderType_ToolbarTitle,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','toolbar-title'),(null as any));
    this._NgClass_0_3 = new import12.Wrapper_NgClass(this.parentView.injectorGet(import13.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import14.KeyValueDiffers,this.parentIndex),new import9.ElementRef(this._el_0),this.renderer);
    this.projectNodes(this._el_0,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'toolbar-title';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = ('toolbar-title-' + this.context._mode);
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
  }
}