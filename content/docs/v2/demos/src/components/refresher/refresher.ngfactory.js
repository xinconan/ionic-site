/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from './refresher';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/security';
export var Wrapper_Refresher = (function () {
    function Wrapper_Refresher(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.Refresher(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
    }
    Wrapper_Refresher.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_Refresher.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    };
    Wrapper_Refresher.prototype.check_pullMin = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.pullMin = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_pullMax = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.pullMax = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_closeDuration = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.closeDuration = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_snapbackDuration = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.snapbackDuration = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_enabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.enabled = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_Refresher.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_Refresher.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_5 = (this.context.state !== 'inactive');
        if (import3.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'refresher-active', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this.context._top;
        if (import3.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            view.renderer.setElementStyle(el, 'top', ((view.viewUtils.sanitizer.sanitize(import4.SecurityContext.STYLE, currVal_6) == null) ? null : view.viewUtils.sanitizer.sanitize(import4.SecurityContext.STYLE, currVal_6).toString()));
            this._expr_6 = currVal_6;
        }
    };
    Wrapper_Refresher.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_Refresher.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.ionRefresh.subscribe(_eventHandler.bind(view, 'ionRefresh')));
        }
        if (emit1) {
            (this.subscription1 = this.context.ionPull.subscribe(_eventHandler.bind(view, 'ionPull')));
        }
        if (emit2) {
            (this.subscription2 = this.context.ionStart.subscribe(_eventHandler.bind(view, 'ionStart')));
        }
    };
    return Wrapper_Refresher;
}());
//# sourceMappingURL=refresher.ngfactory.js.map