/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './input';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../config/config';
import * as import9 from '../../util/form';
import * as import10 from '../item/item';
import * as import11 from '../app/app';
import * as import12 from '../../platform/platform';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '../content/content';
import * as import15 from '../../navigation/nav-controller';
import * as import16 from '@angular/forms/src/directives/ng_control';
import * as import17 from '../../util/dom-controller';
import * as import18 from '@angular/core/src/linker/query_list';
import * as import19 from '../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import20 from '../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import21 from '../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import22 from '../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import23 from './native-input.ngfactory';
import * as import24 from '@angular/core/src/linker/view_container';
import * as import25 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import26 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import27 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import28 from '@angular/core/src/linker/template_ref';
import * as import29 from '@angular/common/src/directives/ng_class';
import * as import30 from '@angular/forms/src/directives/default_value_accessor';
import * as import31 from '@angular/forms/src/directives/control_value_accessor';
import * as import32 from '@angular/forms/src/directives/ng_model';
import * as import33 from '@angular/forms/src/directives/ng_control_status';
import * as import34 from './native-input';
import * as import35 from '@angular/common/src/directives/ng_if';
import * as import36 from '../button/button';
import * as import37 from '../button/button.ngfactory';
export class Wrapper_TextArea {
  /*private*/ _eventHandler:Function;
  context:import0.TextArea;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any,p8:any,p9:any,p10:any) {
    this._changed = false;
    this.context = new import0.TextArea(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_placeholder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.placeholder = currValue;
      this._expr_0 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_1 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_2 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.blur.subscribe(_eventHandler.bind(view,'blur'))); }
    if (emit1) { (this.subscription1 = this.context.focus.subscribe(_eventHandler.bind(view,'focus'))); }
  }
}
export class Wrapper_TextInput {
  /*private*/ _eventHandler:Function;
  context:import0.TextInput;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any,p8:any,p9:any,p10:any) {
    this._changed = false;
    this.context = new import0.TextInput(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_placeholder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.placeholder = currValue;
      this._expr_0 = currValue;
    }
  }
  check_clearInput(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.clearInput = currValue;
      this._expr_1 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_2 = currValue;
    }
  }
  check_type(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.type = currValue;
      this._expr_3 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_4 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_5 = currValue;
    }
  }
  check_clearOnEdit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.clearOnEdit = currValue;
      this._expr_6 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.blur.subscribe(_eventHandler.bind(view,'blur'))); }
    if (emit1) { (this.subscription1 = this.context.focus.subscribe(_eventHandler.bind(view,'focus'))); }
  }
}
var renderType_TextArea_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TextArea_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TextArea>;
  _TextArea_0_3:Wrapper_TextArea;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TextArea_Host0,renderType_TextArea_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-textarea',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TextArea0(this.viewUtils,this,0,this._el_0);
    this._TextArea_0_3 = new Wrapper_TextArea(this.injectorGet(import8.Config,this.parentIndex),this.injectorGet(import9.Form,this.parentIndex),this.injectorGet(import10.Item,this.parentIndex,(null as any)),this.injectorGet(import11.App,this.parentIndex),this.injectorGet(import12.Platform,this.parentIndex),new import13.ElementRef(this._el_0),this.renderer,this.injectorGet(import14.Content,this.parentIndex,(null as any)),this.injectorGet(import15.NavController,this.parentIndex,(null as any)),this.injectorGet(import16.NgControl,this.parentIndex,(null as any)),this.injectorGet(import17.DomController,this.parentIndex));
    this.compView_0.create(this._TextArea_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._TextArea_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TextArea) && (0 === requestNodeIndex))) { return this._TextArea_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._TextArea_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) { this._TextArea_0_3.context.ngAfterContentChecked(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TextArea_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TextAreaNgFactory:import7.ComponentFactory<import0.TextArea> = new import7.ComponentFactory<import0.TextArea>('ion-textarea',View_TextArea_Host0,import0.TextArea);
const styles_TextArea:any[] = ([] as any[]);
var renderType_TextArea:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TextArea,{});
export class View_TextArea0 extends import2.AppView<import0.TextArea> {
  _viewQuery_NativeInput_0:import18.QueryList<any>;
  _viewQuery_NextInput_1:import18.QueryList<any>;
  _el_0:any;
  _NgClass_0_3:import19.Wrapper_NgClass;
  _DefaultValueAccessor_0_4:import20.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_0_5:any[];
  _NgModel_0_6:import21.Wrapper_NgModel;
  _NgControl_0_7:any;
  _NgControlStatus_0_8:import22.Wrapper_NgControlStatus;
  _NativeInput_0_9:import23.Wrapper_NativeInput;
  _anchor_1:any;
  /*private*/ _vc_1:import24.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import25.Wrapper_NgIf;
  _anchor_2:any;
  /*private*/ _vc_2:import24.ViewContainer;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import25.Wrapper_NgIf;
  /*private*/ _expr_18:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TextArea0,renderType_TextArea,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
    this._expr_18 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_NativeInput_0 = new import18.QueryList<any>();
    this._viewQuery_NextInput_1 = new import18.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'textarea',new import3.InlineArray2(2,'class','text-input'),(null as any));
    this._NgClass_0_3 = new import19.Wrapper_NgClass(this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import27.KeyValueDiffers,this.parentIndex),new import13.ElementRef(this._el_0),this.renderer);
    this._DefaultValueAccessor_0_4 = new import20.Wrapper_DefaultValueAccessor(this.renderer,new import13.ElementRef(this._el_0));
    this._NG_VALUE_ACCESSOR_0_5 = [this._DefaultValueAccessor_0_4.context];
    this._NgModel_0_6 = new import21.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_0_5);
    this._NgControl_0_7 = this._NgModel_0_6.context;
    this._NgControlStatus_0_8 = new import22.Wrapper_NgControlStatus(this._NgControl_0_7);
    this._NativeInput_0_9 = new import23.Wrapper_NativeInput(new import13.ElementRef(this._el_0),this.renderer,this.parentView.injectorGet(import8.Config,this.parentIndex),this._NgControl_0_7);
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_1 = new import24.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import28.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import25.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_2 = new import24.ViewContainer(2,(null as any),this,this._anchor_2);
    this._TemplateRef_2_5 = new import28.TemplateRef_(this,2,this._anchor_2);
    this._NgIf_2_6 = new import25.Wrapper_NgIf(this._vc_2.vcRef,this._TemplateRef_2_5);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray16(10,'ngModelChange',(null as any),'blur',(null as any),'focus',(null as any),'input',(null as any),'keydown',(null as any)),this.eventHandler(this.handleEvent_0));
    this._NgModel_0_6.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this._NativeInput_0_9.subscribe(this,this.eventHandler(this.handleEvent_0),false,false,true);
    this._viewQuery_NativeInput_0.reset([this._NativeInput_0_9.context]);
    this.context._nativeInput = this._viewQuery_NativeInput_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._anchor_1,
      this._anchor_2
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import29.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    if (((token === import30.DefaultValueAccessor) && (0 === requestNodeIndex))) { return this._DefaultValueAccessor_0_4.context; }
    if (((token === import31.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    if (((token === import32.NgModel) && (0 === requestNodeIndex))) { return this._NgModel_0_6.context; }
    if (((token === import16.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_7; }
    if (((token === import33.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_8.context; }
    if (((token === import34.NativeInput) && (0 === requestNodeIndex))) { return this._NativeInput_0_9.context; }
    if (((token === import28.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import35.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    if (((token === import28.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import35.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'text-input';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = ('text-input-' + this.context._mode);
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._DefaultValueAccessor_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_2_0:any = this.context._value;
    this._NgModel_0_6.check_model(currVal_0_2_0,throwOnChange,false);
    this._NgModel_0_6.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_8.ngDoCheck(this,this._el_0,throwOnChange);
    this._NativeInput_0_9.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_1_0_0:any = this.context._useAssist;
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,false);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    const currVal_2_0_0:any = this.context._useAssist;
    this._NgIf_2_6.check_ngIf(currVal_2_0_0,throwOnChange,false);
    this._NgIf_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    const currVal_18:any = this.context.placeholder;
    if (import3.checkBinding(throwOnChange,this._expr_18,currVal_18)) {
      this.renderer.setElementProperty(this._el_0,'placeholder',currVal_18);
      this._expr_18 = currVal_18;
    }
    this._NgControlStatus_0_8.checkHost(this,this,this._el_0,throwOnChange);
    if (!throwOnChange) { if (this._viewQuery_NextInput_1.dirty) {
        this._viewQuery_NextInput_1.reset([this._vc_1.mapNestedViews(View_TextArea1,(nestedView:View_TextArea1):any => {
          return [nestedView._NextInput_0_3.context];
      })]);
      this.context._nextInput = this._viewQuery_NextInput_1.first;
    } }
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
    this._vc_2.destroyNestedViews();
    this._NgModel_0_6.ngOnDestroy();
    this._NativeInput_0_9.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_TextArea1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    if ((nodeIndex == 2)) { return new View_TextArea2(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_0_4.handleEvent(eventName,$event) && result);
    result = (this._NativeInput_0_9.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context._value = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_1:any = ((<any>this.context.inputBlurred($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_2:any = ((<any>this.context.inputFocused($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}
class View_TextArea1 extends import2.AppView<any> {
  _el_0:any;
  _NextInput_0_3:import23.Wrapper_NextInput;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import24.ViewContainer) {
    super(View_TextArea1,renderType_TextArea,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray8(6,'aria-hidden','true','next-input','','type','text'),(null as any));
    this._NextInput_0_3 = new import23.Wrapper_NextInput();
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'focus',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import34.NextInput) && (0 === requestNodeIndex))) { return this._NextInput_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._NextInput_0_3.ngDoCheck(this,this._el_0,throwOnChange);
  }
  dirtyParentQueriesInternal():void {
    (<View_TextArea0>this.parentView)._viewQuery_NextInput_1.setDirty();
  }
  destroyInternal():void {
    this._NextInput_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._NextInput_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
class View_TextArea2 extends import2.AppView<any> {
  _el_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import24.ViewContainer) {
    super(View_TextArea2,renderType_TextArea,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray4(4,'class','input-cover','tappable',''),(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray8(8,'touchstart',(null as any),'touchend',(null as any),'mousedown',(null as any),'mouseup',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'touchstart')) {
      const pd_sub_0:any = ((<any>this.parentView.context.pointerStart($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'touchend')) {
      const pd_sub_1:any = ((<any>this.parentView.context.pointerEnd($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mousedown')) {
      const pd_sub_2:any = ((<any>this.parentView.context.pointerStart($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseup')) {
      const pd_sub_3:any = ((<any>this.parentView.context.pointerEnd($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}
var renderType_TextInput_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TextInput_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TextInput>;
  _TextInput_0_3:Wrapper_TextInput;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TextInput_Host0,renderType_TextInput_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-input',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TextInput0(this.viewUtils,this,0,this._el_0);
    this._TextInput_0_3 = new Wrapper_TextInput(this.injectorGet(import8.Config,this.parentIndex),this.injectorGet(import9.Form,this.parentIndex),this.injectorGet(import10.Item,this.parentIndex,(null as any)),this.injectorGet(import11.App,this.parentIndex),this.injectorGet(import12.Platform,this.parentIndex),new import13.ElementRef(this._el_0),this.renderer,this.injectorGet(import14.Content,this.parentIndex,(null as any)),this.injectorGet(import15.NavController,this.parentIndex,(null as any)),this.injectorGet(import16.NgControl,this.parentIndex,(null as any)),this.injectorGet(import17.DomController,this.parentIndex));
    this.compView_0.create(this._TextInput_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._TextInput_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TextInput) && (0 === requestNodeIndex))) { return this._TextInput_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._TextInput_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) { this._TextInput_0_3.context.ngAfterContentChecked(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TextInput_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TextInputNgFactory:import7.ComponentFactory<import0.TextInput> = new import7.ComponentFactory<import0.TextInput>('ion-input',View_TextInput_Host0,import0.TextInput);
const styles_TextInput:any[] = ([] as any[]);
var renderType_TextInput:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TextInput,{});
export class View_TextInput0 extends import2.AppView<import0.TextInput> {
  _viewQuery_NativeInput_0:import18.QueryList<any>;
  _viewQuery_NextInput_1:import18.QueryList<any>;
  _el_0:any;
  _NgClass_0_3:import19.Wrapper_NgClass;
  _DefaultValueAccessor_0_4:import20.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_0_5:any[];
  _NgModel_0_6:import21.Wrapper_NgModel;
  _NgControl_0_7:any;
  _NgControlStatus_0_8:import22.Wrapper_NgControlStatus;
  _NativeInput_0_9:import23.Wrapper_NativeInput;
  _anchor_1:any;
  /*private*/ _vc_1:import24.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import25.Wrapper_NgIf;
  _el_2:any;
  compView_2:import2.AppView<import36.Button>;
  _Button_2_3:import37.Wrapper_Button;
  _anchor_3:any;
  /*private*/ _vc_3:import24.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import25.Wrapper_NgIf;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TextInput0,renderType_TextInput,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_NativeInput_0 = new import18.QueryList<any>();
    this._viewQuery_NextInput_1 = new import18.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'input',new import3.InlineArray2(2,'class','text-input'),(null as any));
    this._NgClass_0_3 = new import19.Wrapper_NgClass(this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import27.KeyValueDiffers,this.parentIndex),new import13.ElementRef(this._el_0),this.renderer);
    this._DefaultValueAccessor_0_4 = new import20.Wrapper_DefaultValueAccessor(this.renderer,new import13.ElementRef(this._el_0));
    this._NG_VALUE_ACCESSOR_0_5 = [this._DefaultValueAccessor_0_4.context];
    this._NgModel_0_6 = new import21.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_0_5);
    this._NgControl_0_7 = this._NgModel_0_6.context;
    this._NgControlStatus_0_8 = new import22.Wrapper_NgControlStatus(this._NgControl_0_7);
    this._NativeInput_0_9 = new import23.Wrapper_NativeInput(new import13.ElementRef(this._el_0),this.renderer,this.parentView.injectorGet(import8.Config,this.parentIndex),this._NgControl_0_7);
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_1 = new import24.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import28.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import25.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this._el_2 = import3.createRenderElement(this.renderer,parentRenderNode,'button',new import3.InlineArray8(8,'class','text-input-clear-icon','clear','','ion-button','','type','button'),(null as any));
    this.compView_2 = new import37.View_Button0(this.viewUtils,this,2,this._el_2);
    this._Button_2_3 = new import37.Wrapper_Button('',this.parentView.injectorGet(import8.Config,this.parentIndex),new import13.ElementRef(this._el_2),this.renderer);
    this.compView_2.create(this._Button_2_3.context);
    this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_3 = new import24.ViewContainer(3,(null as any),this,this._anchor_3);
    this._TemplateRef_3_5 = new import28.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import25.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray16(10,'ngModelChange',(null as any),'blur',(null as any),'focus',(null as any),'input',(null as any),'keydown',(null as any)),this.eventHandler(this.handleEvent_0));
    this._NgModel_0_6.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this._NativeInput_0_9.subscribe(this,this.eventHandler(this.handleEvent_0),false,false,true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray4(4,'click',(null as any),'mousedown',(null as any)),this.eventHandler(this.handleEvent_2));
    this._viewQuery_NativeInput_0.reset([this._NativeInput_0_9.context]);
    this.context._nativeInput = this._viewQuery_NativeInput_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._anchor_1,
      this._el_2,
      this._anchor_3
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import29.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    if (((token === import30.DefaultValueAccessor) && (0 === requestNodeIndex))) { return this._DefaultValueAccessor_0_4.context; }
    if (((token === import31.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    if (((token === import32.NgModel) && (0 === requestNodeIndex))) { return this._NgModel_0_6.context; }
    if (((token === import16.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_7; }
    if (((token === import33.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_8.context; }
    if (((token === import34.NativeInput) && (0 === requestNodeIndex))) { return this._NativeInput_0_9.context; }
    if (((token === import28.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import35.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    if (((token === import36.Button) && (2 === requestNodeIndex))) { return this._Button_2_3.context; }
    if (((token === import28.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import35.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'text-input';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = ('text-input-' + this.context._mode);
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._DefaultValueAccessor_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_2_0:any = this.context._value;
    this._NgModel_0_6.check_model(currVal_0_2_0,throwOnChange,false);
    this._NgModel_0_6.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_8.ngDoCheck(this,this._el_0,throwOnChange);
    this._NativeInput_0_9.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_1_0_0:any = this.context._useAssist;
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,false);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    const currVal_2_0_0:any = '';
    this._Button_2_3.check_clear(currVal_2_0_0,throwOnChange,false);
    if (this._Button_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    const currVal_3_0_0:any = this.context._useAssist;
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Button_2_3.context.ngAfterContentInit(); } }
    const currVal_21:any = this.context.type;
    if (import3.checkBinding(throwOnChange,this._expr_21,currVal_21)) {
      this.renderer.setElementProperty(this._el_0,'type',currVal_21);
      this._expr_21 = currVal_21;
    }
    const currVal_22:any = this.context.placeholder;
    if (import3.checkBinding(throwOnChange,this._expr_22,currVal_22)) {
      this.renderer.setElementProperty(this._el_0,'placeholder',currVal_22);
      this._expr_22 = currVal_22;
    }
    this._NgControlStatus_0_8.checkHost(this,this,this._el_0,throwOnChange);
    const currVal_23:boolean = !this.context.clearInput;
    if (import3.checkBinding(throwOnChange,this._expr_23,currVal_23)) {
      this.renderer.setElementProperty(this._el_2,'hidden',currVal_23);
      this._expr_23 = currVal_23;
    }
    this.compView_2.detectChanges(throwOnChange);
    if (!throwOnChange) { if (this._viewQuery_NextInput_1.dirty) {
        this._viewQuery_NextInput_1.reset([this._vc_1.mapNestedViews(View_TextInput1,(nestedView:View_TextInput1):any => {
          return [nestedView._NextInput_0_3.context];
      })]);
      this.context._nextInput = this._viewQuery_NextInput_1.first;
    } }
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
    this._vc_3.destroyNestedViews();
    this.compView_2.destroy();
    this._NgModel_0_6.ngOnDestroy();
    this._NativeInput_0_9.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 2) && (ngContentIndex == 0))) {  }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_TextInput1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    if ((nodeIndex == 3)) { return new View_TextInput2(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_0_4.handleEvent(eventName,$event) && result);
    result = (this._NativeInput_0_9.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context._value = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_1:any = ((<any>this.context.inputBlurred($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_2:any = ((<any>this.context.inputFocused($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.clearTextInput()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mousedown')) {
      const pd_sub_1:any = ((<any>this.context.clearTextInput()) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}
class View_TextInput1 extends import2.AppView<any> {
  _el_0:any;
  _NextInput_0_3:import23.Wrapper_NextInput;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import24.ViewContainer) {
    super(View_TextInput1,renderType_TextInput,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_2 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray4(4,'aria-hidden','true','next-input',''),(null as any));
    this._NextInput_0_3 = new import23.Wrapper_NextInput();
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'focus',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import34.NextInput) && (0 === requestNodeIndex))) { return this._NextInput_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._NextInput_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2:any = this.parentView.context.type;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_0,'type',currVal_2);
      this._expr_2 = currVal_2;
    }
  }
  dirtyParentQueriesInternal():void {
    (<View_TextInput0>this.parentView)._viewQuery_NextInput_1.setDirty();
  }
  destroyInternal():void {
    this._NextInput_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._NextInput_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
class View_TextInput2 extends import2.AppView<any> {
  _el_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import24.ViewContainer) {
    super(View_TextInput2,renderType_TextInput,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray4(4,'class','input-cover','tappable',''),(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray8(8,'touchstart',(null as any),'touchend',(null as any),'mousedown',(null as any),'mouseup',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'touchstart')) {
      const pd_sub_0:any = ((<any>this.parentView.context.pointerStart($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'touchend')) {
      const pd_sub_1:any = ((<any>this.parentView.context.pointerEnd($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mousedown')) {
      const pd_sub_2:any = ((<any>this.parentView.context.pointerStart($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseup')) {
      const pd_sub_3:any = ((<any>this.parentView.context.pointerEnd($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}