/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from './infinite-scroll-content';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from './infinite-scroll';
import * as import9 from '../../config/config';
import * as import10 from '@angular/core/src/linker/view_container';
import * as import11 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import12 from '@angular/core/src/linker/template_ref';
import * as import13 from '@angular/common/src/directives/ng_if';
import * as import14 from '../spinner/spinner';
import * as import15 from '../spinner/spinner.ngfactory';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/core/src/security';
export var Wrapper_InfiniteScrollContent = (function () {
    function Wrapper_InfiniteScrollContent(p0, p1) {
        this._changed = false;
        this.context = new import0.InfiniteScrollContent(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_InfiniteScrollContent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_InfiniteScrollContent.prototype.ngOnDestroy = function () {
    };
    Wrapper_InfiniteScrollContent.prototype.check_loadingSpinner = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.loadingSpinner = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_InfiniteScrollContent.prototype.check_loadingText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.loadingText = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_InfiniteScrollContent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_InfiniteScrollContent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_2 = this.context.inf.state;
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementAttribute(el, 'state', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
    };
    Wrapper_InfiniteScrollContent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_InfiniteScrollContent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_InfiniteScrollContent;
}());
var renderType_InfiniteScrollContent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_InfiniteScrollContent_Host0 = (function (_super) {
    __extends(View_InfiniteScrollContent_Host0, _super);
    function View_InfiniteScrollContent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_InfiniteScrollContent_Host0, renderType_InfiniteScrollContent_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_InfiniteScrollContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ion-infinite-scroll-content', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_InfiniteScrollContent0(this.viewUtils, this, 0, this._el_0);
        this._InfiniteScrollContent_0_3 = new Wrapper_InfiniteScrollContent(this.injectorGet(import8.InfiniteScroll, this.parentIndex), this.injectorGet(import9.Config, this.parentIndex));
        this.compView_0.create(this._InfiniteScrollContent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._InfiniteScrollContent_0_3.context);
    };
    View_InfiniteScrollContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.InfiniteScrollContent) && (0 === requestNodeIndex))) {
            return this._InfiniteScrollContent_0_3.context;
        }
        return notFoundResult;
    };
    View_InfiniteScrollContent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._InfiniteScrollContent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._InfiniteScrollContent_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_InfiniteScrollContent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_InfiniteScrollContent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_InfiniteScrollContent_Host0;
}(import2.AppView));
export var InfiniteScrollContentNgFactory = new import7.ComponentFactory('ion-infinite-scroll-content', View_InfiniteScrollContent_Host0, import0.InfiniteScrollContent);
var styles_InfiniteScrollContent = [];
var renderType_InfiniteScrollContent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_InfiniteScrollContent, {});
export var View_InfiniteScrollContent0 = (function (_super) {
    __extends(View_InfiniteScrollContent0, _super);
    function View_InfiniteScrollContent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_InfiniteScrollContent0, renderType_InfiniteScrollContent, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_InfiniteScrollContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'infinite-loading'), null);
        this._anchor_1 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_1 = new import10.ViewContainer(1, 0, this, this._anchor_1);
        this._TemplateRef_1_5 = new import12.TemplateRef_(this, 1, this._anchor_1);
        this._NgIf_1_6 = new import11.Wrapper_NgIf(this._vc_1.vcRef, this._TemplateRef_1_5);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_2 = new import10.ViewContainer(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import12.TemplateRef_(this, 2, this._anchor_2);
        this._NgIf_2_6 = new import11.Wrapper_NgIf(this._vc_2.vcRef, this._TemplateRef_2_5);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._anchor_1,
            this._anchor_2
        ]), null);
        return null;
    };
    View_InfiniteScrollContent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_5;
        }
        if (((token === import13.NgIf) && (1 === requestNodeIndex))) {
            return this._NgIf_1_6.context;
        }
        if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import13.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        return notFoundResult;
    };
    View_InfiniteScrollContent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1_0_0 = this.context.loadingSpinner;
        this._NgIf_1_6.check_ngIf(currVal_1_0_0, throwOnChange, false);
        this._NgIf_1_6.ngDoCheck(this, this._anchor_1, throwOnChange);
        var currVal_2_0_0 = this.context.loadingText;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_1.detectChangesInNestedViews(throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
    };
    View_InfiniteScrollContent0.prototype.destroyInternal = function () {
        this._vc_1.destroyNestedViews();
        this._vc_2.destroyNestedViews();
    };
    View_InfiniteScrollContent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 1)) {
            return new View_InfiniteScrollContent1(this.viewUtils, this, 1, this._anchor_1, this._vc_1);
        }
        if ((nodeIndex == 2)) {
            return new View_InfiniteScrollContent2(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    };
    return View_InfiniteScrollContent0;
}(import2.AppView));
var View_InfiniteScrollContent1 = (function (_super) {
    __extends(View_InfiniteScrollContent1, _super);
    function View_InfiniteScrollContent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_InfiniteScrollContent1, renderType_InfiniteScrollContent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_InfiniteScrollContent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'infinite-loading-spinner'), null);
        this._el_1 = import3.createRenderElement(this.renderer, this._el_0, 'ion-spinner', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_1 = new import15.View_Spinner0(this.viewUtils, this, 1, this._el_1);
        this._Spinner_1_3 = new import15.Wrapper_Spinner(this.parentView.parentView.injectorGet(import9.Config, this.parentView.parentIndex), new import16.ElementRef(this._el_1), this.renderer);
        this.compView_1.create(this._Spinner_1_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1
        ]), null);
        return null;
    };
    View_InfiniteScrollContent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import14.Spinner) && (1 === requestNodeIndex))) {
            return this._Spinner_1_3.context;
        }
        return notFoundResult;
    };
    View_InfiniteScrollContent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1_0_0 = this.parentView.context.loadingSpinner;
        this._Spinner_1_3.check_name(currVal_1_0_0, throwOnChange, false);
        if (this._Spinner_1_3.ngDoCheck(this, this._el_1, throwOnChange)) {
            this.compView_1.markAsCheckOnce();
        }
        this._Spinner_1_3.checkHost(this, this.compView_1, this._el_1, throwOnChange);
        this.compView_1.detectChanges(throwOnChange);
    };
    View_InfiniteScrollContent1.prototype.destroyInternal = function () {
        this.compView_1.destroy();
    };
    View_InfiniteScrollContent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_InfiniteScrollContent1;
}(import2.AppView));
var View_InfiniteScrollContent2 = (function (_super) {
    __extends(View_InfiniteScrollContent2, _super);
    function View_InfiniteScrollContent2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_InfiniteScrollContent2, renderType_InfiniteScrollContent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_1 = import1.UNINITIALIZED;
    }
    View_InfiniteScrollContent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'infinite-loading-text'), null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    };
    View_InfiniteScrollContent2.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1 = this.parentView.context.loadingText;
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_0, 'innerHTML', this.viewUtils.sanitizer.sanitize(import17.SecurityContext.HTML, currVal_1));
            this._expr_1 = currVal_1;
        }
    };
    View_InfiniteScrollContent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_InfiniteScrollContent2;
}(import2.AppView));
//# sourceMappingURL=infinite-scroll-content.ngfactory.js.map