/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from './loading-component';
import * as import1 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../navigation/view-controller';
import * as import9 from '../../config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '../../gestures/gesture-controller';
import * as import12 from '../../navigation/nav-params';
import * as import13 from '../backdrop/backdrop.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '../backdrop/backdrop';
import * as import18 from '@angular/common/src/directives/ng_if';
import * as import19 from '../spinner/spinner';
import * as import20 from '../spinner/spinner.ngfactory';
import * as import21 from '@angular/core/src/security';
export var Wrapper_LoadingCmp = (function () {
    function Wrapper_LoadingCmp(p0, p1, p2, p3, p4, p5) {
        this._changed = false;
        this.context = new import0.LoadingCmp(p0, p1, p2, p3, p4, p5);
    }
    Wrapper_LoadingCmp.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_LoadingCmp.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_LoadingCmp.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_LoadingCmp.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_LoadingCmp.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_LoadingCmp.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_LoadingCmp;
}());
var renderType_LoadingCmp_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
var View_LoadingCmp_Host0 = (function (_super) {
    __extends(View_LoadingCmp_Host0, _super);
    function View_LoadingCmp_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingCmp_Host0, renderType_LoadingCmp_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    View_LoadingCmp_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ion-loading', new import3.InlineArray2(2, 'role', 'dialog'), rootSelector, null);
        this.compView_0 = new View_LoadingCmp0(this.viewUtils, this, 0, this._el_0);
        this._LoadingCmp_0_3 = new Wrapper_LoadingCmp(this.injectorGet(import8.ViewController, this.parentIndex), this.injectorGet(import9.Config, this.parentIndex), new import10.ElementRef(this._el_0), this.injectorGet(import11.GestureController, this.parentIndex), this.injectorGet(import12.NavParams, this.parentIndex), this.renderer);
        this.compView_0.create(this._LoadingCmp_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._LoadingCmp_0_3.context);
    };
    View_LoadingCmp_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.LoadingCmp) && (0 === requestNodeIndex))) {
            return this._LoadingCmp_0_3.context;
        }
        return notFoundResult;
    };
    View_LoadingCmp_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._LoadingCmp_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_LoadingCmp_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._LoadingCmp_0_3.ngOnDestroy();
    };
    View_LoadingCmp_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingCmp_Host0;
}(import1.AppView));
export var LoadingCmpNgFactory = new import7.ComponentFactory('ion-loading', View_LoadingCmp_Host0, import0.LoadingCmp);
var styles_LoadingCmp = [];
var renderType_LoadingCmp = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, styles_LoadingCmp, {});
export var View_LoadingCmp0 = (function (_super) {
    __extends(View_LoadingCmp0, _super);
    function View_LoadingCmp0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_LoadingCmp0, renderType_LoadingCmp, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
        this._expr_11 = import6.UNINITIALIZED;
    }
    View_LoadingCmp0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'ion-backdrop', new import3.InlineArray8(6, 'disable-activated', '', 'role', 'presentation', 'tappable', ''), null);
        this._Backdrop_0_3 = new import13.Wrapper_Backdrop(new import10.ElementRef(this._el_0), this.renderer);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'loading-wrapper'), null);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._vc_2 = new import14.ViewContainer(2, 1, this, this._anchor_2);
        this._TemplateRef_2_5 = new import16.TemplateRef_(this, 2, this._anchor_2);
        this._NgIf_2_6 = new import15.Wrapper_NgIf(this._vc_2.vcRef, this._TemplateRef_2_5);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._vc_3 = new import14.ViewContainer(3, 1, this, this._anchor_3);
        this._TemplateRef_3_5 = new import16.TemplateRef_(this, 3, this._anchor_3);
        this._NgIf_3_6 = new import15.Wrapper_NgIf(this._vc_3.vcRef, this._TemplateRef_3_5);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._anchor_2,
            this._anchor_3
        ]), null);
        return null;
    };
    View_LoadingCmp0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.Backdrop) && (0 === requestNodeIndex))) {
            return this._Backdrop_0_3.context;
        }
        if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import18.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import18.NgIf) && (3 === requestNodeIndex))) {
            return this._NgIf_3_6.context;
        }
        return notFoundResult;
    };
    View_LoadingCmp0.prototype.detectChangesInternal = function (throwOnChange) {
        this._Backdrop_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        var currVal_2_0_0 = this.context.showSpinner;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        var currVal_3_0_0 = this.context.d.content;
        this._NgIf_3_6.check_ngIf(currVal_3_0_0, throwOnChange, false);
        this._NgIf_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
        var currVal_11 = !this.context.d.showBackdrop;
        if (import3.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementProperty(this._el_0, 'hidden', currVal_11);
            this._expr_11 = currVal_11;
        }
    };
    View_LoadingCmp0.prototype.destroyInternal = function () {
        this._vc_2.destroyNestedViews();
        this._vc_3.destroyNestedViews();
    };
    View_LoadingCmp0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 2)) {
            return new View_LoadingCmp1(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        if ((nodeIndex == 3)) {
            return new View_LoadingCmp2(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    };
    return View_LoadingCmp0;
}(import1.AppView));
var View_LoadingCmp1 = (function (_super) {
    __extends(View_LoadingCmp1, _super);
    function View_LoadingCmp1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_LoadingCmp1, renderType_LoadingCmp, import5.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    View_LoadingCmp1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'loading-spinner'), null);
        this._el_1 = import3.createRenderElement(this.renderer, this._el_0, 'ion-spinner', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_1 = new import20.View_Spinner0(this.viewUtils, this, 1, this._el_1);
        this._Spinner_1_3 = new import20.Wrapper_Spinner(this.parentView.parentView.injectorGet(import9.Config, this.parentView.parentIndex), new import10.ElementRef(this._el_1), this.renderer);
        this.compView_1.create(this._Spinner_1_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1
        ]), null);
        return null;
    };
    View_LoadingCmp1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import19.Spinner) && (1 === requestNodeIndex))) {
            return this._Spinner_1_3.context;
        }
        return notFoundResult;
    };
    View_LoadingCmp1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1_0_0 = this.parentView.context.d.spinner;
        this._Spinner_1_3.check_name(currVal_1_0_0, throwOnChange, false);
        if (this._Spinner_1_3.ngDoCheck(this, this._el_1, throwOnChange)) {
            this.compView_1.markAsCheckOnce();
        }
        this._Spinner_1_3.checkHost(this, this.compView_1, this._el_1, throwOnChange);
        this.compView_1.detectChanges(throwOnChange);
    };
    View_LoadingCmp1.prototype.destroyInternal = function () {
        this.compView_1.destroy();
    };
    View_LoadingCmp1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingCmp1;
}(import1.AppView));
var View_LoadingCmp2 = (function (_super) {
    __extends(View_LoadingCmp2, _super);
    function View_LoadingCmp2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        _super.call(this, View_LoadingCmp2, renderType_LoadingCmp, import5.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_1 = import6.UNINITIALIZED;
    }
    View_LoadingCmp2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'class', 'loading-content'), null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return null;
    };
    View_LoadingCmp2.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1 = this.parentView.context.d.content;
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_0, 'innerHTML', this.viewUtils.sanitizer.sanitize(import21.SecurityContext.HTML, currVal_1));
            this._expr_1 = currVal_1;
        }
    };
    View_LoadingCmp2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_LoadingCmp2;
}(import1.AppView));
//# sourceMappingURL=loading-component.ngfactory.js.map