/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './loading-component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../navigation/view-controller';
import * as import9 from '../../config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '../../gestures/gesture-controller';
import * as import12 from '../../navigation/nav-params';
import * as import13 from '../backdrop/backdrop.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '../backdrop/backdrop';
import * as import18 from '@angular/common/src/directives/ng_if';
import * as import19 from '../spinner/spinner';
import * as import20 from '../spinner/spinner.ngfactory';
import * as import21 from '@angular/core/src/security';
export class Wrapper_LoadingCmp {
  /*private*/ _eventHandler:Function;
  context:import0.LoadingCmp;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any) {
    this._changed = false;
    this.context = new import0.LoadingCmp(p0,p1,p2,p3,p4,p5);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_LoadingCmp_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_LoadingCmp_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.LoadingCmp>;
  _LoadingCmp_0_3:Wrapper_LoadingCmp;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LoadingCmp_Host0,renderType_LoadingCmp_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-loading',new import3.InlineArray2(2,'role','dialog'),rootSelector,(null as any));
    this.compView_0 = new View_LoadingCmp0(this.viewUtils,this,0,this._el_0);
    this._LoadingCmp_0_3 = new Wrapper_LoadingCmp(this.injectorGet(import8.ViewController,this.parentIndex),this.injectorGet(import9.Config,this.parentIndex),new import10.ElementRef(this._el_0),this.injectorGet(import11.GestureController,this.parentIndex),this.injectorGet(import12.NavParams,this.parentIndex),this.renderer);
    this.compView_0.create(this._LoadingCmp_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._LoadingCmp_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.LoadingCmp) && (0 === requestNodeIndex))) { return this._LoadingCmp_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._LoadingCmp_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._LoadingCmp_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const LoadingCmpNgFactory:import7.ComponentFactory<import0.LoadingCmp> = new import7.ComponentFactory<import0.LoadingCmp>('ion-loading',View_LoadingCmp_Host0,import0.LoadingCmp);
const styles_LoadingCmp:any[] = ([] as any[]);
var renderType_LoadingCmp:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_LoadingCmp,{});
export class View_LoadingCmp0 extends import1.AppView<import0.LoadingCmp> {
  _el_0:any;
  _Backdrop_0_3:import13.Wrapper_Backdrop;
  _el_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import14.ViewContainer;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import15.Wrapper_NgIf;
  _anchor_3:any;
  /*private*/ _vc_3:import14.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import15.Wrapper_NgIf;
  /*private*/ _expr_11:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LoadingCmp0,renderType_LoadingCmp,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._expr_11 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'ion-backdrop',new import3.InlineArray8(6,'disable-activated','','role','presentation','tappable',''),(null as any));
    this._Backdrop_0_3 = new import13.Wrapper_Backdrop(new import10.ElementRef(this._el_0),this.renderer);
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','loading-wrapper'),(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_2 = new import14.ViewContainer(2,1,this,this._anchor_2);
    this._TemplateRef_2_5 = new import16.TemplateRef_(this,2,this._anchor_2);
    this._NgIf_2_6 = new import15.Wrapper_NgIf(this._vc_2.vcRef,this._TemplateRef_2_5);
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import14.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import16.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import15.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._anchor_2,
      this._anchor_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.Backdrop) && (0 === requestNodeIndex))) { return this._Backdrop_0_3.context; }
    if (((token === import16.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import18.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import18.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Backdrop_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2_0_0:any = this.context.showSpinner;
    this._NgIf_2_6.check_ngIf(currVal_2_0_0,throwOnChange,false);
    this._NgIf_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    const currVal_3_0_0:any = this.context.d.content;
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    const currVal_11:boolean = !this.context.d.showBackdrop;
    if (import3.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_0,'hidden',currVal_11);
      this._expr_11 = currVal_11;
    }
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this._vc_3.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import1.AppView<any> {
    if ((nodeIndex == 2)) { return new View_LoadingCmp1(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    if ((nodeIndex == 3)) { return new View_LoadingCmp2(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
}
class View_LoadingCmp1 extends import1.AppView<any> {
  _el_0:any;
  _el_1:any;
  compView_1:import1.AppView<import19.Spinner>;
  _Spinner_1_3:import20.Wrapper_Spinner;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_LoadingCmp1,renderType_LoadingCmp,import5.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','loading-spinner'),(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,this._el_0,'ion-spinner',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import20.View_Spinner0(this.viewUtils,this,1,this._el_1);
    this._Spinner_1_3 = new import20.Wrapper_Spinner(this.parentView.parentView.injectorGet(import9.Config,this.parentView.parentIndex),new import10.ElementRef(this._el_1),this.renderer);
    this.compView_1.create(this._Spinner_1_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.Spinner) && (1 === requestNodeIndex))) { return this._Spinner_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.parentView.context.d.spinner;
    this._Spinner_1_3.check_name(currVal_1_0_0,throwOnChange,false);
    if (this._Spinner_1_3.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    this._Spinner_1_3.checkHost(this,this.compView_1,this._el_1,throwOnChange);
    this.compView_1.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_LoadingCmp2 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_LoadingCmp2,renderType_LoadingCmp,import5.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_1 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','loading-content'),(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1:any = this.parentView.context.d.content;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementProperty(this._el_0,'innerHTML',this.viewUtils.sanitizer.sanitize(import21.SecurityContext.HTML,currVal_1));
      this._expr_1 = currVal_1;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}