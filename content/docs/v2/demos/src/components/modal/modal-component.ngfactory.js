/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from './modal-component';
import * as import1 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/component_factory_resolver';
import * as import9 from '../../navigation/nav-params';
import * as import10 from '../../navigation/view-controller';
import * as import11 from '../../gestures/gesture-controller';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '../backdrop/backdrop.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '../backdrop/backdrop';
export var Wrapper_ModalCmp = (function () {
    function Wrapper_ModalCmp(p0, p1, p2, p3, p4) {
        this._changed = false;
        this.context = new import0.ModalCmp(p0, p1, p2, p3, p4);
    }
    Wrapper_ModalCmp.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_ModalCmp.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_ModalCmp.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_ModalCmp.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_ModalCmp.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'body:keyup')) {
            var pd_sub_0 = (this.context._keyUp($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_ModalCmp.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_ModalCmp;
}());
var renderType_ModalCmp_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
var View_ModalCmp_Host0 = (function (_super) {
    __extends(View_ModalCmp_Host0, _super);
    function View_ModalCmp_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_ModalCmp_Host0, renderType_ModalCmp_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    View_ModalCmp_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ion-modal', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_ModalCmp0(this.viewUtils, this, 0, this._el_0);
        this._ModalCmp_0_3 = new Wrapper_ModalCmp(this.injectorGet(import8.ComponentFactoryResolver, this.parentIndex), this.renderer, this.injectorGet(import9.NavParams, this.parentIndex), this.injectorGet(import10.ViewController, this.parentIndex), this.injectorGet(import11.GestureController, this.parentIndex));
        this.compView_0.create(this._ModalCmp_0_3.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'keyup', 'body'), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import7.ComponentRef_(0, this, this._el_0, this._ModalCmp_0_3.context);
    };
    View_ModalCmp_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.ModalCmp) && (0 === requestNodeIndex))) {
            return this._ModalCmp_0_3.context;
        }
        return notFoundResult;
    };
    View_ModalCmp_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._ModalCmp_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_ModalCmp_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._ModalCmp_0_3.ngOnDestroy();
    };
    View_ModalCmp_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_ModalCmp_Host0.prototype.handleEvent_0 = function (eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._ModalCmp_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return View_ModalCmp_Host0;
}(import1.AppView));
export var ModalCmpNgFactory = new import7.ComponentFactory('ion-modal', View_ModalCmp_Host0, import0.ModalCmp);
var styles_ModalCmp = [];
var renderType_ModalCmp = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, styles_ModalCmp, {});
export var View_ModalCmp0 = (function (_super) {
    __extends(View_ModalCmp0, _super);
    function View_ModalCmp0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_ModalCmp0, renderType_ModalCmp, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import6.UNINITIALIZED;
    }
    View_ModalCmp0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_viewport_0 = new import12.QueryList();
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'ion-backdrop', new import3.InlineArray8(6, 'disable-activated', '', 'role', 'presentation', 'tappable', ''), null);
        this._Backdrop_0_3 = new import13.Wrapper_Backdrop(new import15.ElementRef(this._el_0), this.renderer);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'modal-wrapper'), null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_1, 'div', new import3.InlineArray2(2, 'nav-viewport', ''), null);
        this._vc_2 = new import14.ViewContainer(2, 1, this, this._el_2);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this._viewQuery_viewport_0.reset([this._vc_2.vcRef]);
        this.context._viewport = this._viewQuery_viewport_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2
        ]), [disposable_0]);
        return null;
    };
    View_ModalCmp0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.Backdrop) && (0 === requestNodeIndex))) {
            return this._Backdrop_0_3.context;
        }
        return notFoundResult;
    };
    View_ModalCmp0.prototype.detectChangesInternal = function (throwOnChange) {
        this._Backdrop_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
        var currVal_6 = !this.context._bdDismiss;
        if (import3.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementClass(this._el_0, 'backdrop-no-tappable', currVal_6);
            this._expr_6 = currVal_6;
        }
    };
    View_ModalCmp0.prototype.destroyInternal = function () {
        this._vc_2.destroyNestedViews();
    };
    View_ModalCmp0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context._bdClick() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_ModalCmp0;
}(import1.AppView));
//# sourceMappingURL=modal-component.ngfactory.js.map