/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './modal-component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/component_factory_resolver';
import * as import9 from '../../navigation/nav-params';
import * as import10 from '../../navigation/view-controller';
import * as import11 from '../../gestures/gesture-controller';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '../backdrop/backdrop.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '../backdrop/backdrop';
export class Wrapper_ModalCmp {
  /*private*/ _eventHandler:Function;
  context:import0.ModalCmp;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this._changed = false;
    this.context = new import0.ModalCmp(p0,p1,p2,p3,p4);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'body:keyup')) {
      const pd_sub_0:any = ((<any>this.context._keyUp($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_ModalCmp_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_ModalCmp_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.ModalCmp>;
  _ModalCmp_0_3:Wrapper_ModalCmp;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ModalCmp_Host0,renderType_ModalCmp_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ion-modal',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ModalCmp0(this.viewUtils,this,0,this._el_0);
    this._ModalCmp_0_3 = new Wrapper_ModalCmp(this.injectorGet(import8.ComponentFactoryResolver,this.parentIndex),this.renderer,this.injectorGet(import9.NavParams,this.parentIndex),this.injectorGet(import10.ViewController,this.parentIndex),this.injectorGet(import11.GestureController,this.parentIndex));
    this.compView_0.create(this._ModalCmp_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'keyup','body'),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._ModalCmp_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ModalCmp) && (0 === requestNodeIndex))) { return this._ModalCmp_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ModalCmp_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._ModalCmp_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._ModalCmp_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const ModalCmpNgFactory:import7.ComponentFactory<import0.ModalCmp> = new import7.ComponentFactory<import0.ModalCmp>('ion-modal',View_ModalCmp_Host0,import0.ModalCmp);
const styles_ModalCmp:any[] = ([] as any[]);
var renderType_ModalCmp:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_ModalCmp,{});
export class View_ModalCmp0 extends import1.AppView<import0.ModalCmp> {
  _viewQuery_viewport_0:import12.QueryList<any>;
  _el_0:any;
  _Backdrop_0_3:import13.Wrapper_Backdrop;
  _el_1:any;
  _el_2:any;
  /*private*/ _vc_2:import14.ViewContainer;
  /*private*/ _expr_6:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ModalCmp0,renderType_ModalCmp,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._expr_6 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_viewport_0 = new import12.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'ion-backdrop',new import3.InlineArray8(6,'disable-activated','','role','presentation','tappable',''),(null as any));
    this._Backdrop_0_3 = new import13.Wrapper_Backdrop(new import15.ElementRef(this._el_0),this.renderer);
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','modal-wrapper'),(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray2(2,'nav-viewport',''),(null as any));
    this._vc_2 = new import14.ViewContainer(2,1,this,this._el_2);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_0));
    this._viewQuery_viewport_0.reset([this._vc_2.vcRef]);
    this.context._viewport = this._viewQuery_viewport_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.Backdrop) && (0 === requestNodeIndex))) { return this._Backdrop_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Backdrop_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    const currVal_6:boolean = !this.context._bdDismiss;
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementClass(this._el_0,'backdrop-no-tappable',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context._bdClick()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}